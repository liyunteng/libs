cmake_minimum_required(VERSION 3.5)

project(MAIN)
set (PROJECT_VERSION 1.0)

set(BUILD_SHARED_LIBS true)

############################## SYSTEM INFO ##############################
# cmake_host_system_information(RESULT HOSTNAME QUERY HOSTNAME)
# cmake_host_system_information(RESULT FQDN QUERY FQDN)
# cmake_host_system_information(RESULT OS_NAME QUERY OS_NAME)
# cmake_host_system_information(RESULT OS_RELEASE QUERY OS_RELEASE)
# cmake_host_system_information(RESULT OS_VERSION QUERY OS_VERSION)
# cmake_host_system_information(RESULT OS_PLATFORM QUERY OS_PLATFORM)

# cmake_host_system_information(RESULT NUMBER_OF_PHYSICAL_CORES QUERY NUMBER_OF_PHYSICAL_CORES)
# cmake_host_system_information(RESULT NUMBER_OF_LOGICAL_CORES QUERY NUMBER_OF_LOGICAL_CORES)
# cmake_host_system_information(RESULT PROCESSOR_NAME QUERY PROCESSOR_NAME)
# cmake_host_system_information(RESULT PROCESSOR_SERIAL_NUMBER QUERY PROCESSOR_SERIAL_NUMBER)
# cmake_host_system_information(RESULT PROCESSOR_DESCRIPTION QUERY PROCESSOR_DESCRIPTION)

# cmake_host_system_information(RESULT TOTAL_PHYSICAL_MEMORY QUERY TOTAL_PHYSICAL_MEMORY)
# cmake_host_system_information(RESULT TOTAL_VIRTUAL_MEMORY QUERY TOTAL_VIRTUAL_MEMORY)
# cmake_host_system_information(RESULT AVAILABLE_VIRTUAL_MEMORY QUERY AVAILABLE_VIRTUAL_MEMORY)

# cmake_host_system_information(RESULT IS_64BIT QUERY IS_64BIT)
# cmake_host_system_information(RESULT HAS_FPU QUERY HAS_FPU)
# cmake_host_system_information(RESULT HAS_MMX QUERY HAS_MMX)
# cmake_host_system_information(RESULT HAS_MMX_PLUS QUERY HAS_MMX_PLUS)
# cmake_host_system_information(RESULT HAS_SSE QUERY HAS_SSE)
# cmake_host_system_information(RESULT HAS_SSE2 QUERY HAS_SSE2)
# cmake_host_system_information(RESULT HAS_SSE_FP QUERY HAS_SSE_FP)
# cmake_host_system_information(RESULT HAS_SSE_MMX QUERY HAS_SSE_MMX)
# cmake_host_system_information(RESULT HAS_AMD_3DNOW QUERY HAS_AMD_3DNOW)
# cmake_host_system_information(RESULT HAS_AMD_3DNOW_PLUS QUERY HAS_AMD_3DNOW_PLUS)
# cmake_host_system_information(RESULT HAS_IA64 QUERY HAS_IA64)
# cmake_host_system_information(RESULT HAS_SERIAL_NUMBER QUERY HAS_SERIAL_NUMBER)

# message(STATUS "HOSTNAME = " ${HOSTNAME})
# message(STATUS "FQDN = " ${FQDN})
# message(STATUS "OS_NAME = " ${OS_NAME})
# message(STATUS "OS_RELEASE = " ${OS_RELEASE})
# message(STATUS "OS_VERSION = " ${OS_VERSION})
# message(STATUS "OS_PLATFORM = " ${OS_PLATFORM})

# message(STATUS "NUMBER_OF_LOGICAL_CORES = " ${NUMBER_OF_LOGICAL_CORES})
# message(STATUS "NUMBER_OF_PHYSICAL_CORES = " ${NUMBER_OF_PHYSICAL_CORES})
# message(STATUS "PROCESSOR_NAME = " ${PROCESSOR_NAME})
# message(STATUS "PROCESSOR_SERIAL_NUMBER = " ${PROCESSOR_SERIAL_NUMBER})
# message(STATUS "PROCESSOR_DESCRIPTION = " ${PROCESSOR_DESCRIPTION})

# message(STATUS "TOTAL_PHYSICAL_MEMORY = " ${TOTAL_PHYSICAL_MEMORY})
# message(STATUS "TOTAL_VIRTUAL_MEMORY = " ${TOTAL_VIRTUAL_MEMORY})
# message(STATUS "AVAILABLE_VIRTUAL_MEMORY = " ${AVAILABLE_VIRTUAL_MEMORY})

# message(STATUS "IS_64BIT = " ${IS_64BIT})
# message(STATUS "HAS_FPU = " ${HAS_FPU})
# message(STATUS "HAS_MMX = " ${HAS_MMX})
# message(STATUS "HAS_MMX_PLUS = " ${HAS_MMX_PLUS})
# message(STATUS "HAS_SSE = " ${HAS_SSE})
# message(STATUS "HAS_SSE2 = " ${HAS_SSE2})
# message(STATUS "HAS_SSE_FP = " ${HAS_SSE_FP})
# message(STATUS "HAS_SSE_MMX = " ${HAS_SSE_MMX})
# message(STATUS "HAS_AMD_3DNOW = " ${HAS_AMD_3DNOW})
# message(STATUS "HAS_AMD_3DNOW_PLUS = " ${HAS_AMD_3DNOW_PLUS})
# message(STATUS "HAS_IA64 = " ${HAS_IA64})
# message(STATUS "HAS_SERIAL_NUMBER = " ${HAS_SERIAL_NUMBER})
######################################################################

message("PROJECT_NAME = " ${PROJECT_NAME})
message("PROJECT_VERSION = " ${PROJECT_VERSION})
message("PROJECT_DESCRIPTION = " ${PROJECT_DESCRIPTION})
message("PROJECT_HOMEPAGE_URL = " ${PROJECT_HOMEPAGE_URL})
message("PROJECT_LABEL = " ${PROJECT_LABEL})
message("PROJECT_SOURCE_DIR = " ${PROJECT_SOURCE_DIR})
message("PROJECT_BINARY_DIR = " ${PROJECT_BINARY_DIR})
message("CMAKE_BUILD_TYPE = " ${CMAKE_BUILD_TYPE})
message("")

message("CMAKE_HOST_SYSTEM = " ${CMAKE_HOST_SYSTEM})
message("CMAKE_HOST_SYSTEM_NAME = " ${CMAKE_HOST_SYSTEM_NAME})
message("CMAKE_HOST_SYSTEM_PROCESSOR = " ${CMAKE_HOST_SYSTEM_PROCESSOR})
message("CMAKE_HOST_SYSTEM_VERSION = " ${CMAKE_HOST_SYSTEM_VERSION})
message("")

message("CMAKE_C_COMPILER = " ${CMAKE_C_COMPILER})
message("CMAKE_C_COMPILER_VERSION = " ${CMAKE_C_COMPILER_VERSION})
message("CMAKE_C_COMPILER_TARGET = " ${CMAKE_C_COMPILER_TARGET})
message("CMAKE_C_FLAGS = " ${CMAKE_C_FLAGS})
message("CMAKE_C_FLAGS_DEBUG = " ${CMAKE_C_FLAGS_DEBUG})
message("CMAKE_C_FLAGS_RELEASE = " ${CMAKE_C_FLAGS_RELEASE})
message("")

# message("CMAKE_EXE_LINKER_FLAGS = " ${CMAKE_EXE_LINKER_FLAGS})
# message("CMAKE_EXE_LINKER_FLAGS_DEBUG = " ${CMAKE_EXE_LINKER_FLAGS_DEBUG})
# message("CMAKE_EXE_LINKER_FLAGS_RELEASE = " ${CMAKE_EXE_LINKER_FLAGS_RELEASE})
# message("CMAKE_SHARED_LINKER_FLAGS = " ${CMAKE_SHARED_LINKER_FLAGS})
# message("CMAKE_SHARED_LINKER_FLAGS_DEBUG = " ${CMAKE_SHARED_LINKER_FLAGS_DEBUG})
# message("CMAKE_SHARED_LINKER_FLAGS_RELEASE = " ${CMAKE_SHARED_LINKER_FLAGS_RELEASE})
# message("CMAKE_STATIC_LINKER_FLAGS = " ${CMAKE_STATIC_LINKER_FLAGS})
# message("CMAKE_STATIC_LINKER_FLAGS_DEBUG = " ${CMAKE_STATIC_LINKER_FLAGS_DEBUG})
# message("CMAKE_STATIC_LINKER_FLAGS_RELEASE = " ${CMAKE_STATIC_LINKER_FLAGS_RELEASE})
# message("LIBRARY_OUTPUT_DIRECTORY = " ${LIBRARY_OUTPUT_DIRECTORY})
# message("LIBRARY_OUTPUT_DIRECTORY_DEBUG = " ${LIBRARY_OUTPUT_DIRECTORY_DEBUG})
# message("LIBRARY_OUTPUT_DIRECTORY_RELEASE = " ${LIBRARY_OUTPUT_DIRECTORY_RELEASE})
# message("EXECUTABLE_OUTPUT_PATH = " ${EXECUTABLE_OUTPUT_PATH})
# message("EXECUTABLE_OUTPUT_PATH_DEBUG = " ${EXECUTABLE_OUTPUT_PATH_DEBUG})
# message("EXECUTABLE_OUTPUT_PATH_RELEASEo = " ${EXECUTABLE_OUTPUT_PATH_RELEASE})

# message("CMAKE_INCLUDE_PATH = " ${CMAKE_INCLUDE_PATH})
# message("CMAKE_LIBRARY_PATH = " ${CMAKE_LIBRARY_PATH})
message("BUILD_SHARED_LIBS = " ${BUILD_SHARED_LIBS})
message("BUILD_CONFIGURATION = " ${BUILD_CONFIGURATION})
message("")

######################################################################
# set(EXECUTABLE_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/bin)
# set(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/lib)
set(EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin)
set(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib)

include_directories(${PROJECT_SOURCE_DIR}/include)
link_directories(${PROJECT_BINARY_DIR}/lib)

# find_program(curl "/usr/bin/curl")
# if (curl)
#   exec_program("/usr/bin/curl" ARGS "\"http://www.baidu.com\" -s -o /dev/null" var)
# else()
# endif()

# exec_program(
#   curl
#   ARGS "\"http://www.baidu.com\"" -s
#   OUTPUT_VARIABLE var
#   RETURN_VALUE ret)
# message("var = " ${var})
# message("ret = " ${ret})

# find_package(CURL)
# if (CURL_FOUND)
#   include_directories(${CURL_INCLUDE_DIR})
#   # target_link_directories(test ${CURL_LIBRARY)
#   message("CURL_INCLUDE_DIR = " ${CURL_INCLUDE_DIR})
#   message("CURL_LIBRARY = " ${CURL_LIBRARY})
#   message("CURL library found")
# else(CURL_FOUND)
#   message(FATAL_ERROR "CURL library not found")
# endif(CURL_FOUND)
add_subdirectory(aes)
add_subdirectory(argv)
add_subdirectory(atomic)
add_subdirectory(avl)
add_subdirectory(base64)
add_subdirectory(backtrace)
add_subdirectory(bitmap)
add_subdirectory(bits)
add_subdirectory(bsearch)
add_subdirectory(bst)
add_subdirectory(channel)
add_subdirectory(event)
add_subdirectory(fifo)
add_subdirectory(heap)
add_subdirectory(heap_timer)
add_subdirectory(config)
add_subdirectory(crc)
add_subdirectory(daemon)
add_subdirectory(list)
add_subdirectory(log)
add_subdirectory(locker)
add_subdirectory(onetime)
add_subdirectory(md5)
add_subdirectory(jhash)
add_subdirectory(mpool)
add_subdirectory(proc)
add_subdirectory(rbtree)
add_subdirectory(rbtree_new)
add_subdirectory(ringtab)
add_subdirectory(sbox)
add_subdirectory(sha)
add_subdirectory(sema)
add_subdirectory(stack)
add_subdirectory(time_wheel)
add_subdirectory(thread-pool)
add_subdirectory(task-queue)
add_subdirectory(uri-parse)
add_subdirectory(urlcodec)
add_subdirectory(uuid)
add_subdirectory(xmlcfg)

add_subdirectory(media)
